// SkillHub H·ªá Th·ªëng Ng∆∞·ªùi Ti√™n Phong C·ªông ƒê·ªìng
// H·ªá th·ªëng danh ti·∫øng v√† tham gia c·ªông ƒë·ªìng theo phong c√°ch Vi·ªát Nam

export interface ContributionPoints {
  total: number
  breakdown: {
    reviews: number
    photos: number
    tutorials: number
    mentoring: number
    verification: number
    moderation: number
    events: number
    localIntelligence: number
  }
}

export interface UserBadge {
  id: string
  name: string
  nameVi: string
  description: string
  descriptionVi: string
  icon: string
  earnedAt: Date
  category: 'vƒÉn_h√≥a' | 'ƒë√≥ng_g√≥p' | 'ch·∫•t_l∆∞·ª£ng' | 'c·ªông_ƒë·ªìng' | 'th√†nh_t√≠ch'
  rarity: 'ph·ªï_bi·∫øn' | '√≠t_g·∫∑p' | 'hi·∫øm' | 'huy·ªÅn_tho·∫°i'
}

export interface CommunityLevel {
  id: string
  name: string
  nameVi: string
  minPoints: number
  maxPoints: number
  color: string
  privileges: string[]
  description: string
  descriptionVi: string
}

// Vietnamese Community Levels
export const COMMUNITY_LEVELS: CommunityLevel[] = [
  {
    id: 'newcomer',
    name: 'Newcomer',
    nameVi: 'Ng∆∞·ªùi m·ªõi',
    minPoints: 0,
    maxPoints: 50,
    color: 'gray',
    privileges: ['basic_interaction'],
    description: 'New community member',
    descriptionVi: 'Th√†nh vi√™n m·ªõi trong c·ªông ƒë·ªìng'
  },
  {
    id: 'good_neighbor',
    name: 'Good Neighbor', 
    nameVi: 'H√†ng x√≥m t·ªët',
    minPoints: 51,
    maxPoints: 200,
    color: 'blue',
    privileges: ['basic_interaction', 'photo_upload', 'review_voting'],
    description: 'Helpful community member',
    descriptionVi: 'Th√†nh vi√™n h·ªØu √≠ch trong c·ªông ƒë·ªìng'
  },
  {
    id: 'community_expert',
    name: 'Community Expert',
    nameVi: 'Chuy√™n gia c·ªông ƒë·ªìng',
    minPoints: 201,
    maxPoints: 1000,
    color: 'emerald',
    privileges: ['basic_interaction', 'photo_upload', 'review_voting', 'content_moderation', 'provider_verification'],
    description: 'Recognized local expert',
    descriptionVi: 'Chuy√™n gia ƒë∆∞·ª£c c·ªông ƒë·ªìng c√¥ng nh·∫≠n'
  },
  {
    id: 'master_teacher',
    name: 'Master/Teacher',
    nameVi: 'Th·∫ßy/C√¥',
    minPoints: 1001,
    maxPoints: 5000,
    color: 'purple',
    privileges: ['basic_interaction', 'photo_upload', 'review_voting', 'content_moderation', 'provider_verification', 'event_hosting', 'mentorship'],
    description: 'Respected teacher and mentor',
    descriptionVi: 'Th·∫ßy/C√¥ ƒë∆∞·ª£c k√≠nh tr·ªçng v√† l√† ng∆∞·ªùi c·ªë v·∫•n'
  },
  {
    id: 'community_guide',
    name: 'Community Guide',
    nameVi: 'Ng∆∞·ªùi d·∫´n ƒë∆∞·ªùng',
    minPoints: 5001,
    maxPoints: Infinity,
    color: 'gold',
    privileges: ['basic_interaction', 'photo_upload', 'review_voting', 'content_moderation', 'provider_verification', 'event_hosting', 'mentorship', 'ward_leadership', 'platform_influence'],
    description: 'Community leader and guide',
    descriptionVi: 'Ng∆∞·ªùi l√£nh ƒë·∫°o v√† d·∫´n ƒë∆∞·ªùng cho c·ªông ƒë·ªìng'
  }
]

// Vietnamese Cultural Badges
export const CULTURAL_BADGES: Omit<UserBadge, 'id' | 'earnedAt'>[] = [
  {
    name: 'Elder Respect',
    nameVi: 'T√¥n k√≠nh ng∆∞·ªùi l·ªõn',
    description: 'Consistently helps elderly community members',
    descriptionVi: 'Th∆∞·ªùng xuy√™n gi√∫p ƒë·ª° ng∆∞·ªùi l·ªõn tu·ªïi trong c·ªông ƒë·ªìng',
    icon: 'üëµ',
    category: 'cultural',
    rarity: 'uncommon'
  },
  {
    name: 'Good Neighbor',
    nameVi: 'Ng∆∞·ªùi h√†ng x√≥m',
    description: 'Active in local neighborhood',
    descriptionVi: 'T√≠ch c·ª±c trong khu ph·ªë ƒë·ªãa ph∆∞∆°ng',
    icon: 'üè†',
    category: 'cultural',
    rarity: 'common'
  },
  {
    name: 'Community Teacher',
    nameVi: 'Th·∫ßy gi√°o c·ªông ƒë·ªìng',
    description: 'Teaches skills to others',
    descriptionVi: 'D·∫°y k·ªπ nƒÉng cho ng∆∞·ªùi kh√°c',
    icon: 'üìö',
    category: 'cultural',
    rarity: 'rare'
  },
  {
    name: 'Connector',
    nameVi: 'Ng∆∞·ªùi m√¥i gi·ªõi',
    description: 'Successfully connects people',
    descriptionVi: 'K·∫øt n·ªëi m·ªçi ng∆∞·ªùi th√†nh c√¥ng',
    icon: 'ü§ù',
    category: 'community',
    rarity: 'uncommon'
  },
  {
    name: 'Local Expert',
    nameVi: 'Chuy√™n gia ƒë·ªãa ph∆∞∆°ng',
    description: 'Deep local area knowledge',
    descriptionVi: 'Hi·ªÉu bi·∫øt s√¢u v·ªÅ khu v·ª±c ƒë·ªãa ph∆∞∆°ng',
    icon: 'üéØ',
    category: 'contribution',
    rarity: 'rare'
  },
  {
    name: 'Trusted Person',
    nameVi: 'Ng∆∞·ªùi tin c·∫≠y',
    description: 'Consistently reliable contributions',
    descriptionVi: 'ƒê√≥ng g√≥p ƒë√°ng tin c·∫≠y nh·∫•t qu√°n',
    icon: 'üåü',
    category: 'quality',
    rarity: 'legendary'
  }
]

// Contribution Activities and Points
export const CONTRIBUTION_ACTIVITIES = {
  // Content Contributions
  ADD_PHOTOS: { points: 10, nameVi: 'Th√™m ·∫£nh tr∆∞·ªõc/sau', category: 'content' },
  WRITE_TUTORIAL: { points: 15, nameVi: 'Vi·∫øt h∆∞·ªõng d·∫´n chi ti·∫øt', category: 'content' },
  CREATE_PRICING_GUIDE: { points: 20, nameVi: 'T·∫°o h∆∞·ªõng d·∫´n gi√° c·∫£', category: 'content' },
  HOST_SKILL_SESSION: { points: 25, nameVi: 'T·ªï ch·ª©c chia s·∫ª k·ªπ nƒÉng', category: 'content' },
  MENTOR_PROVIDER: { points: 30, nameVi: 'H∆∞·ªõng d·∫´n nh√† cung c·∫•p m·ªõi', category: 'content' },
  ORGANIZE_EVENT: { points: 50, nameVi: 'T·ªï ch·ª©c s·ª± ki·ªán c·ªông ƒë·ªìng', category: 'content' },

  // Local Intelligence
  UPDATE_AVAILABILITY: { points: 5, nameVi: 'C·∫≠p nh·∫≠t t√¨nh tr·∫°ng', category: 'intelligence' },
  REPORT_BUSINESS_CHANGE: { points: 10, nameVi: 'B√°o c√°o thay ƒë·ªïi doanh nghi·ªáp', category: 'intelligence' },
  ADD_SAFETY_TIPS: { points: 15, nameVi: 'Th√™m m·∫πo an to√†n', category: 'intelligence' },
  CREATE_TRANSPORT_GUIDE: { points: 20, nameVi: 'T·∫°o h∆∞·ªõng d·∫´n di chuy·ªÉn', category: 'intelligence' },
  MAP_SERVICE_AREA: { points: 25, nameVi: 'B·∫£n ƒë·ªì khu v·ª±c d·ªãch v·ª•', category: 'intelligence' },

  // Quality Control
  VOTE_REVIEW: { points: 5, nameVi: 'B√¨nh ch·ªçn ƒë√°nh gi√°', category: 'quality' },
  FLAG_CONTENT: { points: 10, nameVi: 'B√°o c√°o n·ªôi dung kh√¥ng ph√π h·ª£p', category: 'quality' },
  VERIFY_PROVIDER: { points: 15, nameVi: 'X√°c minh nh√† cung c·∫•p', category: 'quality' },
  MODERATE_DISCUSSION: { points: 20, nameVi: 'Ki·ªÉm duy·ªát th·∫£o lu·∫≠n', category: 'quality' },
  RESOLVE_DISPUTE: { points: 30, nameVi: 'Gi·∫£i quy·∫øt tranh ch·∫•p', category: 'quality' }
}

// Utility Functions
export function getUserLevel(points: number): CommunityLevel {
  return COMMUNITY_LEVELS.find(level => 
    points >= level.minPoints && points <= level.maxPoints
  ) || COMMUNITY_LEVELS[0]
}

export function getNextLevel(points: number): CommunityLevel | null {
  const currentLevelIndex = COMMUNITY_LEVELS.findIndex(level => 
    points >= level.minPoints && points <= level.maxPoints
  )
  
  return currentLevelIndex < COMMUNITY_LEVELS.length - 1 
    ? COMMUNITY_LEVELS[currentLevelIndex + 1] 
    : null
}

export function getProgressToNextLevel(points: number): {
  current: number
  needed: number
  percentage: number
} {
  const currentLevel = getUserLevel(points)
  const nextLevel = getNextLevel(points)
  
  if (!nextLevel) {
    return { current: points, needed: 0, percentage: 100 }
  }
  
  const current = points - currentLevel.minPoints
  const needed = nextLevel.minPoints - currentLevel.minPoints
  const percentage = Math.min((current / needed) * 100, 100)
  
  return { current, needed, percentage }
}

export function awardPoints(
  currentPoints: ContributionPoints, 
  activity: keyof typeof CONTRIBUTION_ACTIVITIES,
  amount?: number
): ContributionPoints {
  const activityPoints = amount || CONTRIBUTION_ACTIVITIES[activity].points
  const category = CONTRIBUTION_ACTIVITIES[activity].category
  
  const updated = { ...currentPoints }
  updated.total += activityPoints
  
  // Update category breakdown
  switch (category) {
    case 'content':
      if (activity.includes('PHOTOS')) updated.breakdown.photos += activityPoints
      else if (activity.includes('TUTORIAL')) updated.breakdown.tutorials += activityPoints
      else if (activity.includes('MENTOR')) updated.breakdown.mentoring += activityPoints
      else if (activity.includes('EVENT')) updated.breakdown.events += activityPoints
      break
    case 'intelligence':
      updated.breakdown.localIntelligence += activityPoints
      break
    case 'quality':
      if (activity.includes('VERIFY')) updated.breakdown.verification += activityPoints
      else if (activity.includes('MODERATE') || activity.includes('FLAG')) updated.breakdown.moderation += activityPoints
      break
  }
  
  return updated
}

// Check if user should earn badge
export function checkBadgeEligibility(
  points: ContributionPoints,
  userActivity: any, // This would be more specific based on user activity tracking
  existingBadges: UserBadge[]
): Omit<UserBadge, 'earnedAt'>[] {
  const eligibleBadges: Omit<UserBadge, 'earnedAt'>[] = []
  const existingBadgeNames = existingBadges.map(b => b.nameVi)
  
  // Check various badge criteria
  if (points.breakdown.mentoring >= 100 && !existingBadgeNames.includes('Th·∫ßy gi√°o c·ªông ƒë·ªìng')) {
    eligibleBadges.push(CULTURAL_BADGES.find(b => b.nameVi === 'Th·∫ßy gi√°o c·ªông ƒë·ªìng')!)
  }
  
  if (points.breakdown.verification >= 50 && !existingBadgeNames.includes('Ng∆∞·ªùi tin c·∫≠y')) {
    eligibleBadges.push(CULTURAL_BADGES.find(b => b.nameVi === 'Ng∆∞·ªùi tin c·∫≠y')!)
  }
  
  if (points.breakdown.localIntelligence >= 200 && !existingBadgeNames.includes('Chuy√™n gia ƒë·ªãa ph∆∞∆°ng')) {
    eligibleBadges.push(CULTURAL_BADGES.find(b => b.nameVi === 'Chuy√™n gia ƒë·ªãa ph∆∞∆°ng')!)
  }
  
  return eligibleBadges
}